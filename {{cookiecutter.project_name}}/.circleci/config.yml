{% raw -%}
version: 2

defaults: &defaults
  working_directory: ~/repo

filter_ignore_master: &filter_ignore_master
  filters:
    branches:
      ignore:
        - master
        - /^release.*/
    tags:
      only:
        - /^v.*/

filter_only_develop_or_tag: &filter_only_develop_or_tag
  filters:
    branches:
      only:
        - develop
    tags:
      only:
        - /^v.*/

references:
  restore_repo: &restore_repo
    restore_cache:
      keys:
        - v1-repo-{{ .Branch }}-{{ .Environment.CIRCLE_SHA1 }}

jobs:
  checkout_code:
    <<: *defaults
    docker:
      - image: circleci/python:3.6
      - image: circleci/node:latest
      - image: circleci/postgres:9.5
    steps:
      - checkout
      - save_cache:
          key: v1-repo-{{ .Branch }}-{{ .Environment.CIRCLE_SHA1 }}
          paths:
            - .

  frontend:
    <<: *defaults
    docker:
      - image: circleci/node:latest
    steps:
      - *restore_repo
      - restore_cache:
          key: v1-npm-{{ checksum "frontend/package.json" }}
      - run: cd frontend && npm ci
      - save_cache:
          key: v1-npm-{{ checksum "frontend/package.json" }}
          paths:
            - ~/repo/frontend/node_modules
      - run:
          command: |
            cd frontend
            npm test
            npm run eslint
            npm run build:prod
            npm run ssr:prod
      - save_cache:
          key: v1-assets-{{ .Branch }}-{{ .Environment.CIRCLE_SHA1 }}
          paths:
            - ~/repo/src/core/static/core
            - ~/repo/frontend/raw
            - ~/repo/frontend/dist

  django:
    <<: *defaults
    docker:
      - image: circleci/python:3.6
      - image: circleci/postgres:9.5
        environment:
          POSTGRES_USER: ubuntu
          POSTGRES_DB: circle_test
    steps:
      - *restore_repo
      - restore_cache:
          key: v1-requirements-{{ .Branch }}-{{ checksum "src/requirements/test.txt" }}
      - run:
          command: |
            python3 -m venv venv
            . venv/bin/activate
            pip install -r src/requirements/test.txt
      - save_cache:
          key: v1-requirements-{{ .Branch }}-{{ checksum "src/requirements/test.txt" }}
          paths:
            - ~/repo/venv
      - run:
          command: |
            . venv/bin/activate
            cd src
            pytest -c pytest.circleci.ini
      - save_cache:
          key: v1-django-{{ .Branch }}-{{ .Environment.CIRCLE_SHA1 }}
          paths:
            - ~/repo/src

  deploy:
    <<: *defaults
    docker:
      - image: circleci/python:3.6
    steps:
      - *restore_repo
      - restore_cache:
          key: v1-django-{{ .Branch }}-{{ .Environment.CIRCLE_SHA1 }}
      - restore_cache:
          key: v1-assets-{{ .Branch }}-{{ .Environment.CIRCLE_SHA1 }}
      - restore_cache:
          key: v1-deploy-{{ checksum "deploy/requirements.txt" }}
      - run:
          command: |
            cd deploy
            python3 -m venv venv
            sudo apt-get -y -qq install rsync
            . venv/bin/activate
            pip install -r requirements.txt
            ansible-galaxy install -r requirements.yml
      - save_cache:
          key: v1-deploy-{{ checksum "deploy/requirements.txt" }}
          paths:
            - deploy/venv
      - run:
          command: |
            cd deploy
            . venv/bin/activate

            if [ "${CIRCLE_BRANCH}" == "develop" ]; then
              ansible-playbook deploy.yml -i stages/stage
            fi

            if [ "${CIRCLE_TAG}" ]; then
              ansible-playbook deploy.yml -i stages/prod
            fi

workflows:
  version: 2
  build_and_test:
    jobs:
      - checkout_code:
          <<: *filter_ignore_master
      - frontend:
          <<: *filter_ignore_master
          requires:
            - checkout_code
      - django:
          <<: *filter_ignore_master
          requires:
            - checkout_code
      - deploy:
          <<: *filter_only_develop_or_tag
          requires:
            - frontend
            - django
{% endraw %}
