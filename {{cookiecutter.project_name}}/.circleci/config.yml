{% raw -%}
version: 2.1

orbs:
  slack: circleci/slack@4.2.1

defaults: &defaults
  working_directory: ~/repo

filter_ignore_main: &filter_ignore_main
  filters:
    branches:
      ignore:
        - main
        - /^release.*/
    tags:
      only:
        - /^v.*/

filter_only_develop_or_tag: &filter_only_develop_or_tag
  filters:
    branches:
      only:
        - develop
    tags:
      only:
        - /^v.*/

references:
  restore_repo: &restore_repo
    restore_cache:
      keys:
        - v1-repo-{{ .Branch }}-{{ .Environment.CIRCLE_SHA1 }}

jobs:
  checkout_code:
    <<: *defaults
    docker:
      - image: circleci/python:3.8
      - image: circleci/node:12
      - image: circleci/postgres:12-postgis
    steps:
      - checkout
      - save_cache:
          key: v1-repo-{{ .Branch }}-{{ .Environment.CIRCLE_SHA1 }}
          paths:
            - .

  frontend:
    <<: *defaults
    docker:
      - image: circleci/node:12
    steps:
      - *restore_repo
      - restore_cache:
          key: v1-npm-{{ checksum "frontend/package.json" }}
      - run: cd frontend && npm ci
      - save_cache:
          key: v1-npm-{{ checksum "frontend/package.json" }}
          paths:
            - ~/repo/frontend/node_modules
      - run:
          command: |
            mkdir -p test-results/jest
            cd frontend
            npm test:ci
            echo "NEXT_PUBLIC_SENTRY_DSN=$NEXT_PUBLIC_SENTRY_DSN" >> .env
            npm run build
            npm run build-storybook
            # So we don't copy the gigantic node_modules on each deploy
            rm -rf node_modules
          environment:
            JEST_JUNIT_OUTPUT_DIR: ../test-results/jest/
      - store_test_results:
          path: test-results/jest
      - store_artifacts:
          path: test-results/jest
      - save_cache:
          key: v1-assets-{{ .Branch }}-{{ .Environment.CIRCLE_SHA1 }}
          paths:
            - ~/repo/frontend/
      - when:
          condition: ${SLACK_ACCESS_TOKEN}
          steps:
            - slack/notify:
                event: fail
                template: basic_fail_1
  django:
    <<: *defaults
    docker:
      - image: circleci/python:3.8
      - image: circleci/postgres:12-postgis
        environment:
          POSTGRES_USER: ubuntu
          POSTGRES_DB: circle_test
          POSTGRES_HOST_AUTH_METHOD: trust
    steps:
      - *restore_repo
      - restore_cache:
          key: v1-requirements-{{ .Branch }}-{{ checksum "src/requirements/test.txt" }}
      - run:
          command: |
            python3 -m venv venv
            . venv/bin/activate
            pip install -r src/requirements/test.txt
      - save_cache:
          key: v1-requirements-{{ .Branch }}-{{ checksum "src/requirements/test.txt" }}
          paths:
            - ~/repo/venv
            - ~/.cache/pip
      - run:
          name: Install additional geodjango deps
          command: |
            sudo apt-get install -y libproj-dev gdal-bin
      - run:
          name: Make sure black has been applied to .py files
          command: |
            . venv/bin/activate
            pip install black
            black --exclude "/(\.eggs|\.git|\.hg|\.mypy_cache|\.nox|\.tox|\.venv|_build|buck-out|build|dist|migrations)/" --check src
      - run:
          name: Run tests and show the 10 slowest cases
          command: |
            . venv/bin/activate
            mkdir -p test-results/pytest
            cd src
            pytest -c pytest.circleci.ini --durations 10 --junitxml=../test-results/pytest/junit.xml
      - store_test_results:
          path: test-results/pytest
      - store_artifacts:
          path: test-results/pytest
      - save_cache:
          key: v1-django-{{ .Branch }}-{{ .Environment.CIRCLE_SHA1 }}
          paths:
            - ~/repo/src
      - when:
          condition: ${SLACK_ACCESS_TOKEN}
          steps:
            - slack/notify:
                event: fail
                template: basic_fail_1

  deploy:
    <<: *defaults
    docker:
      - image: circleci/python:3.8
    environment:
      SENTRY_AUTH_TOKEN: ${SENTRY_AUTH_TOKEN}
    steps:
      - *restore_repo
      - restore_cache:
          key: v1-django-{{ .Branch }}-{{ .Environment.CIRCLE_SHA1 }}
      - restore_cache:
          key: v1-assets-{{ .Branch }}-{{ .Environment.CIRCLE_SHA1 }}
      - restore_cache:
          key: v1-deploy-{{ checksum "deploy/requirements.txt" }}
      - run:
          name: Install ansible and ansistrano
          command: |
            cd deploy
            python3 -m venv venv
            sudo apt-get -y -qq install rsync
            . venv/bin/activate
            pip install -r requirements.txt
            ansible-galaxy install -r requirements.yml
      - save_cache:
          key: v1-deploy-{{ checksum "deploy/requirements.txt" }}
          paths:
            - deploy/venv
      - run:
          command: |
            mv frontend src
      - run:
          command: |
            cd deploy
            . venv/bin/activate

            if [ "${CIRCLE_BRANCH}" == "develop" ]; then
              ansible-playbook deploy.yml -i stages/stage.yml
            fi

            if [ "${CIRCLE_TAG}" ]; then
              ansible-playbook deploy.yml -i stages/prod.yml
            fi
      - when:
          condition: ${SENTRY_AUTH_TOKEN}
          steps:
            - run:
                name: Upload sourcemaps to sentry
                command: |
                  curl -sL https://sentry.io/get-cli/ | bash
                  if [ "${CIRCLE_BRANCH}" == "develop" ]; then
                    export SENTRY_RELEASE=$(sentry-cli releases propose-version)
                  fi
                  if [ "${CIRCLE_TAG}" ]; then
                    export SENTRY_RELEASE=${CIRCLE_TAG}
                  fi
                  sentry-cli releases new -p $SENTRY_PROJECT $SENTRY_RELEASE
                  sentry-cli releases finalize $SENTRY_RELEASE
                  sentry-cli releases files $SENTRY_RELEASE upload-sourcemaps  ~/repo/src/frontend/.next --rewrite
      - when:
          condition: ${SLACK_ACCESS_TOKEN}
          steps:
            - slack/notify:
                event: fail
                template: basic_fail_1

workflows:
  version: 2
  build_and_test:
    jobs:
      - checkout_code:
          <<: *filter_ignore_main
          context:
            - CIRCLECI_BOT
      - frontend:
          <<: *filter_ignore_main
          context:
            - CIRCLECI_BOT
          requires:
            - checkout_code
      - django:
          <<: *filter_ignore_main
          context:
            - CIRCLECI_BOT
          requires:
            - checkout_code
      - deploy:
          <<: *filter_only_develop_or_tag
          context:
            - CIRCLECI_BOT
          requires:
            - frontend
            - django
 {% endraw %}
